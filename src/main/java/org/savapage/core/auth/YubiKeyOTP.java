/*
 * This file is part of the SavaPage project <https://www.savapage.org>.
 * Copyright (c) 2011-2016 Datraverse B.V.
 * Author: Rijk Ravestein.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 *
 * For more information, please contact Datraverse B.V. at this
 * address: info@datraverse.com
 */
package org.savapage.core.auth;

import com.yubico.client.v2.VerificationResponse;
import com.yubico.client.v2.YubicoClient;
import com.yubico.client.v2.exceptions.YubicoValidationFailure;
import com.yubico.client.v2.exceptions.YubicoVerificationException;

/**
 *
 * @author Rijk Ravestein
 *
 */
public final class YubiKeyOTP {

    /**
     * The length of the YubiKey Public ID.
     */
    public static final int PUBLIC_ID_LENGTH = 12;

    /**
     * The OTP generated by a YubiKey.
     */
    private final String yubicoOTP;

    /**
     *
     * @param otp
     *            The OTP generated by a YubiKey.
     */
    public YubiKeyOTP(final String otp) {

        /*
         * OTP needs to be in lowercase for the cloud verification to work.
         */
        this.yubicoOTP = otp.toLowerCase();

        if (!isValidOTPFormat(this.yubicoOTP)) {
            throw new IllegalArgumentException("Invalid Yubico OTP format");
        }
    }

    /**
     *
     * @param otp
     *            The OTP generated by a YubiKey.
     * @return {@code true} when OTP format is valid.
     */
    public static boolean isValidOTPFormat(final String otp) {
        return YubicoClient.isValidOTPFormat(otp);
    }

    /**
     * @return The Public ID.
     */
    public String getPublicId() {
        return YubicoClient.getPublicId(this.yubicoOTP);
    }

    /**
     *
     * @param clientId
     *            The API client ID
     * @param secretKey
     *            The API secret key.
     * @return {@code true} when OTP is accepted, {@code false} when denied.
     *
     * @throws YubicoVerificationException
     *             When connectivity failure to Yubico cloud service.
     * @throws YubicoValidationFailure
     *             When OTP content is invalid.
     */
    public boolean isOk(final Integer clientId, final String secretKey)
            throws YubicoVerificationException, YubicoValidationFailure {

        final YubicoClient client = YubicoClient.getClient(clientId, secretKey);
        final VerificationResponse response = client.verify(this.yubicoOTP);
        return response.isOk();
    }
}
